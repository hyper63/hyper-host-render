# If your hyper app exists in a sub-directory of your repo ie. monorepo,
# Set the path here to the root of your hyper configuration
# rootDir: apps/hyper

services:
  # The Hyper Application
  - type: web
    name: hyper
    # Change to the desired Render plan
    plan: starter
    env: docker
    dockerfilePath: ./app/Dockerfile
    dockerContext: ./app
    envVars:
      # key and secret for accessing the hyper server
      - key: SUB
        generateValue: true
      - key: SECRET
        generateValue: true
      # Include the MongoDB credentials in the hyper app runtime environment
      - key: MONGO_USERNAME
        fromService:
          name: mongodb
          type: pserv
          envVarKey: MONGO_INITDB_ROOT_USERNAME
      - key: MONGO_PASSWORD
        fromService:
          name: mongodb
          type: pserv
          envVarKey: MONGO_INITDB_ROOT_PASSWORD
      # Include the MongoDB host url and port
      - key: MONGO_HOST
        fromService:
          name: mongodb
          type: pserv
          property: hostport
      # Include the Redis host url and port
      - key: REDIS_HOST
        fromService:
          name: redis
          type: pserv
          property: host
      - key: REDIS_PORT
        fromService:
          name: redis
          type: pserv
          property: port
      # Include the Elasticsearch host url
      - key: ELASTICSEARCH_HOST
        fromService:
          name: elasticsearch
          type: pserv
          property: hostport
      # Include the MinIO credentials in the hyper app runtime environment
      - key: MINIO_USERNAME
        fromService:
          name: minio
          type: web
          envVarKey: MINIO_ROOT_USER
      - key: MINIO_PASSWORD
        fromService:
          name: minio
          type: web
          envVarKey: MINIO_ROOT_PASSWORD
      # Include the MinIO host url
      - key: MINIO_HOST
        fromService:
          name: minio
          type: web
          property: host

  # MongoDB Server powering hyper Data
  - type: pserv
    name: mongodb
    env: docker
    # Change to the desired Render plan
    plan: starter
    dockerfilePath: ./data/Dockerfile
    dockerContext: ./data
    # Use a Render Disk to persist data
    disk:
      name: mongodbdata
      mountPath: /data/db
      # Change this value if you'd like more DB storage
      sizeGB: 5
    autoDeploy: false
    envVars:
      - key: MONGO_INITDB_ROOT_USERNAME
        generateValue: true
      - key: MONGO_INITDB_ROOT_PASSWORD
        generateValue: true

  # Redis
  - type: pserv
    name: redis
    env: docker
    dockerfilePath: ./cache/Dockerfile
    dockerContext: ./cache
    # Change to the desired Render plan
    plan: starter
    autoDeploy: false
    disk:
      name: redisdata
      mountPath: /var/lib/redis
      # Change this value if you'd like more cache storage
      sizeGB: 5

  # Elasticsearch
  - type: pserv
    name: elasticsearch
    env: docker
    # Change to the desired Render plan
    # NOTE: this has to be at least standard or Elasticsearch errors due to insufficient memory -___-
    plan: standard
    dockerfilePath: ./search/Dockerfile
    dockerContext: ./search
    disk:
      name: esdata
      mountPath: /usr/share/elasticsearch/data
      # Change this value if you'd like more index storage
      sizeGB: 10
    autoDeploy: false
    envVars:
      - key: ES_JAVA_OPTS
        value: "-Xms512m -Xmx512m"
      - key: discovery.type
        value: single-node
      - key: cluster.name
        value: elastic

  # MinIO Server
  # In order for MinIO to accept requests using presigned urls,
  # the server must be made public
  - type: web
    name: minio
    env: docker
    plan: starter
    dockerfilePath: ./storage/Dockerfile
    dockerContext: ./storage
    disk:
      name: miniodata
      mountPath: /data
      sizeGB: 5
    autoDeploy: false
    envVars:
      - key: MINIO_ROOT_USER
        generateValue: true
      - key: MINIO_ROOT_PASSWORD
        generateValue: true
